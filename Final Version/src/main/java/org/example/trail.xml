<?xml version="1.0" encoding="UTF-8"?>
<trial>
    <rule id="multiple_declarations_in_single_line" enabled="true">
        <description>Check for multiple variable declarations in a single line</description>
        <category>Coding Conventions</category>
        <condition><![CDATA[
            containsRegex(variableDeclaration, "")
        ]]></condition>
        <pattern>\b(?:int|long|double|float|char|boolean|String)\s+[a-zA-Z_$][a-zA-Z\d_$]*(?:\s*,\s*[a-zA-Z_$][a-zA-Z\d_$]*)+\s*;</pattern>
        <message>Multiple variable declarations in a single line are not allowed.</message>
    </rule>

    <rule id="multiple_initializations_in_single_line" enabled="true">
        <description>Check for multiple variable initializations in a single line</description>
        <category>Coding Conventions</category>
        <condition><![CDATA[
        matchesRegex(variableInitialization, "\b\w+\s*=\s*[^,;]+(,\s*\w+\s*=\s*[^,;]+)+\s*;")
    ]]></condition>
        <pattern>\b\w+\s*=\s*[^,;]+(,\s*\w+\s*=\s*[^,;]+)+\s*;</pattern>
        <message>Multiple variable initializations in a single line are not allowed.</message>
    </rule>

    <rule id="class_naming_convention" enabled="true">
        <description>Check for class naming convention</description>
        <category>Coding Conventions</category>
        <condition><![CDATA[
            !className.matches("^[A-Z][a-zA-Z0-9]*$")
        ]]></condition>
        <pattern>^[A-Z][a-zA-Z0-9]*$</pattern>
        <message>Does not match class name convention.</message>
    </rule>

    <rule id="unused_local_variable" enabled="true">
        <description>Check for unused variables</description>
        <category>Coding Conventions</category>
        <pattern>\b(?:int|long|double|float|boolean|char|byte|short|Integer|Long|Double|Float|Boolean|Character|Byte|Short|String)\s+([a-zA-Z_][a-zA-Z0-9_]*)\s*=\s*.*;</pattern>
        <message>Unused variables</message>
    </rule>



    <rule id="abstract_class_without_abstract_method" enabled="true">
        <description>Check for abstract classes without any abstract methods</description>
        <category>Design Flaws</category>
        <condition><![CDATA[
        !containsRegex(classBody, "abstract\\s+\\w+\\s*\\([^)]*\\)\\s*\\{[^}]*\\}")
    ]]></condition>
        <pattern>.*\babstract\b.*</pattern>
        <message>Abstract class should contain at least one abstract method.</message>
    </rule>

    <rule id="protected_constructor_in_abstract_class" enabled="true">
        <description>Check for protected constructors in abstract classes</description>
        <category>Coding Conventions</category>
        <priority>3</priority>
        <ruleclass>
            <name>net.sourceforge.pmd.lang.java.rule.design.ProtectedConstructorInAbstractClassRule</name>
        </ruleclass>
        <condition><![CDATA[
        !containsRegex(classBody, "public\\s+\\w+\\s*\\([^)]*\\)\\s*\\{[^}]*}")
    ]]></condition>
        <pattern>.*\bpublic\b.*</pattern>
        <message>Abstract class should have a protected constructor to prevent direct instantiation.</message>
    </rule>

    <rule id="clone_array_objects" enabled="true">
        <description>Check for constructors and methods receiving arrays without cloning objects</description>
        <category>Coding Conventions</category>
        <condition><![CDATA[
        containsRegex(methodSignature, "\b(\w+)\s*\(\s*(.*?)\[\]\s*\)")
        && containsRegex(methodBody, "(\1\s*\\[\\]\s*=\s*\\2\\s*\\.\\s*clone\\(\\))|(\1\s*\\[\\]\s*=\s*\\2\\.clone\\(\\))")]]></condition>
        <pattern></pattern>
        <message>Constructors and methods receiving arrays should clone objects and store the copy.</message>
    </rule>

    <rule id="avoid_message_digest_as_field" enabled="true">
        <description>Avoid declaring MessageDigest instances as fields</description>
        <category>Coding Conventions</category>
        <condition><![CDATA[
        containsRegex(classBody, "private\s+(static\s+)?MessageDigest\s+\w+;")
    ]]></condition>
        <pattern></pattern>
        <message>MessageDigest instances should not be declared as fields. Create them locally instead.</message>
    </rule>

    <rule id="avoid_reassigning_loop_variables" enabled="true">
        <description>Check for reassigned loop variables</description>
        <category>Coding Conventions</category>
        <pattern>\bfor\s*\(\s*(?:\w+\s+)?(\w+)\s*=\s*\d+\s*;\s*\w+\s*(?:&lt;=|&gt;=|&lt;|&gt;|==)\s*\d+\s*;\s*\w+\s*(?:\+\+|\-\-|\+=|\-=)\s*\)</pattern>
        <message>Reassigned loop variables should be avoided.</message>
    </rule>

    <rule id="avoid_reassigning_parameters" enabled="true">
        <description>Avoid reassigning values to incoming parameters of methods or constructors</description>
        <category>Coding Conventions</category>
        <condition><![CDATA[
        containsRegex(methodSignature, "\\b" + parameterName + "\\b")
        && containsRegex(methodBody, "\\b" + parameterName + "\\b\\s*=\\s*[^;]+;")
    ]]></condition>
        <pattern>((public|protected|private|final|static|synchronized|transient|volatile)\s+)*(?!return)(?!if)\b([a-zA-Z_$][a-zA-Z\d_$]*)\s+([a-zA-Z_$][a-zA-Z\d_$]*)\s*=\s*([a-zA-Z_$][a-zA-Z\d_$]*)\s*;</pattern>
        <message>Reassigning values to incoming parameters of methods or constructors is not recommended. Use temporary local variables instead.</message>
    </rule>

    <rule id="avoid_stringbuffer_stringbuilder_in_long_lived_objects" enabled="true">
        <description>Avoid using StringBuffers/StringBuilders in objects with long lifetimes</description>
        <category>Coding Conventions</category>
        <condition><![CDATA[
        containsRegex(classBody, "\\b(StringBuffer|StringBuilder)\\b.*;\\s*//\\s*Holding\\s+in\\s+long-lived\\s+objects")
    ]]></condition>
        <pattern></pattern>
        <message>StringBuffers/StringBuilders can grow considerably and may become a source of memory leaks if held within objects with long lifetimes.</message>
    </rule>

    <rule id="avoid_hardcoded_ip_addresses" enabled="true">
        <description>Avoid hard-coded IP addresses in the application</description>
        <category>Coding Conventions</category>
        <condition><![CDATA[
        containsRegex(fileContent, "(?<!\\w)(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})(?!\\w)")
    ]]></condition>
        <pattern>(?&lt;&#33;\d)(\d{1,3}\.){3}\d{1,3}(?&#33;\d)</pattern>
        <message>Hard-coded IP addresses can become impossible to deploy in some cases. Externalize IP addresses instead.</message>
    </rule>

    <rule id="check_resultset_navigation_return_values" enabled="true">
        <description>Always check the return values of navigation methods (next, previous, first, last) of a ResultSet</description>
        <category>Coding Conventions</category>
        <condition><![CDATA[
        containsRegex(methodBody, "next\\(\\)\\s*==\\s*false;")
        || containsRegex(methodBody, "previous\\(\\)\\s*==\\s*false;")
        || containsRegex(methodBody, "first\\(\\)\\s*==\\s*false;")
        || containsRegex(methodBody, "last\\(\\)\\s*==\\s*false;")
    ]]></condition>
        <pattern></pattern>
        <message>Always check the return values of navigation methods (next, previous, first, last) of a ResultSet. If the value return is ‘false’, it should be handled properly.</message>
    </rule>

    <rule id="avoid_constants_in_interfaces" enabled="true">
        <description>Avoid using constants in interfaces</description>
        <category>Design Flaws</category>
        <condition><![CDATA[
        containsRegex(interfaceBody, "public\\s+static\\s+final\\s+[^\\s]+\\s+[^\\s]+\\s*=\\s*[^;]+;")
    ]]></condition>
        <pattern>public\\s+static\\s+final\\s+[^\\s]+\\s+[^\\s]+\\s*=\\s*[^;]+;</pattern>
        <message>Using constants in interfaces is a bad practice. Consider using a utility class or an enum type instead.</message>
    </rule>

    <rule id="default_label_last_in_switch" enabled="true">
        <description>By convention, the default label should be the last label in a switch statement</description>
        <category>Design Flaws</category>
        <condition><![CDATA[
        !containsRegex(methodBody, "case\\s*:.*default\\s*:")
        && containsRegex(methodBody, "default\\s*:.*case\\s*:")
    ]]></condition>
        <pattern>switch\s*\(.*?\)\s*\{(?:(?!\bdefault\b|case\b)[^{}]|(?:case[^:]+:\s*.*?))+\bdefault\b[^{}]*break\s*;\s*[^{}]*\}</pattern>
        <message>The default label should be the last label in a switch statement by convention.</message>
    </rule>

    <rule id="avoid_throwing_runtimeexception" enabled="true">
        <description>Avoid throwing raw RuntimeException.</description>
        <category>Design Flaws</category>
        <condition>containsRegex(methodBody, "throw\s+new\s+RuntimeException\(\s*\);?")</condition>
        <pattern></pattern>
        <message>Throw a more specific subclass of RuntimeException instead.</message>
    </rule>

    <rule id="avoid_rethrowing_exception" enabled="true">
        <description>Avoid catch blocks that simply rethrow the caught exception.</description>
        <category>Design Flaws</category>
        <condition>containsRegex(catchClause, "catch\s*\(.*?\)\s*\{\s*throw\s+\w+\s*;?\s*}")</condition>
        <pattern></pattern>
        <message>Catch blocks should handle the exception or rethrow with a specific cause.</message>
    </rule>

    <rule id="avoid_catching_generic_exception" enabled="true">
        <description>Avoid catching generic exceptions (NullPointerException, RuntimeException, Exception) in try-catch blocks.</description>
        <category>Design Flaws</category>
        <condition>containsRegex(catchClause, "catch\s*\(.*?((NullPointerException)|(RuntimeException)|(Exception))\s*\w+\s*\)")</condition>
        <pattern></pattern>
        <message>Avoid catching generic exceptions like NullPointerException, RuntimeException, or Exception. Catch specific exceptions instead.</message>
    </rule>

    <rule id="abstract_class_without_any_method" enabled="true">
        <description>Checks for abstract classes without any methods (might be a data container).</description>
        <category>Design Flaws</category>
        <condition>!containsRegex(classBody, "(abstract|public|protected)\\s+\\w+\\s*\\([^)]*\\)\\s*\\{[^}]*}")</condition>
        <pattern></pattern>
        <message>Abstract class should contain at least one method (abstract or concrete).</message>
    </rule>

    <rule id="god_class" enabled="true">
        <description>Detects classes with a high number of methods (potential God Class).</description>
        <category>Design Flaws</category>
        <condition>containsRegex(classBody, "\\bpublic\s+[^ ]+\s*\\(.*?\\)\\s*\\{.*?\\}")</condition>
        <pattern></pattern>
        <message>This class has too many methods ({numMethods}). Consider refactoring into smaller classes.</message>
    </rule>


    <rule id="comment_density" enabled="true">
        <description>Check for comment density in the Java file</description>
        <category>Comment Density</category>
        <condition><![CDATA[
        commentDensity > 0.2  // Adjust the threshold as needed
    ]]></condition>
        <pattern></pattern>
        <message>Comment density is too high. Aim to keep it below 20%.</message>
    </rule>


</trial>
