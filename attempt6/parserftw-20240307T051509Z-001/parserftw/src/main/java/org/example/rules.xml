<?xml version="1.0" encoding="UTF-8"?>

<triall>
    <rule id="multiple_declarations_in_single_line" enabled="true">
        <description>Check for multiple variable declarations in a single line</description>
        <condition><![CDATA[
            containsRegex(variableDeclaration, "")
        ]]></condition>
        <pattern>\b(var|int|double|String)\s+\w+\s*(,(\s*\w+\s*)+)?;</pattern>
        <message>Multiple variable declarations in a single line are not allowed.</message>
    </rule>

    <rule id="multiple_initializations_in_single_line" enabled="true">
        <description>Check for multiple variable initializations in a single line</description>
        <condition><![CDATA[
            containsRegex(variableInitialization, "\\b\\w+\\s*=\\s*[^,;]+(,\\s*\\w+\\s*=\\s*[^,;]+)+\\s*;")
        ]]></condition>
        <pattern>\\b\\w+\\s+\\w+\\s*(?:=(?:\\s*\\S+)?(?:\\s*,\\s*\\w+\\s*=\\s*\\S+)?)*(?:,\\s*\\w+\\s*(?:=(?:\\s*\\S+)?(?:\\s*,\\s*\\w+\\s*=\\s*\\S+)?)*\\s*)?;</pattern>
        <message>Multiple variable initializations in a single line are not allowed.</message>
    </rule>

    <rule id="class_naming_convention" enabled="true">
        <description>Check for class naming convention</description>
        <condition><![CDATA[
            !className.matches("^[a-z][a-zA-Z0-9]*$")
        ]]></condition>
        <pattern>^[a-z][a-zA-Z0-9]*$</pattern>
        <message>Does not match class name convention.</message>
    </rule>

    <rule id="unused_local_variable" enabled="true">
        <description>Check for unused local variables</description>
        <condition><![CDATA[
            containsRegex(methodBody, "\\b" + variableName + "\\b.*(?=;)")
        ]]></condition>
        <pattern>\\b" + variableName + "\\b.*(?=;)</pattern>
        <message>Has unused local variables.</message>
    </rule>

    <rule id="comment_density" enabled="true">
        <description>Check for comment density in the Java file</description>
        <condition><![CDATA[
        commentDensity > 0.3 // Adjust the threshold as needed]]></condition>
        <pattern></pattern> <!-- No specific pattern needed for this rule -->
        <message>Comment density is too high. Aim to keep it below 20%.</message>
    </rule>


    <rule id="abstract_class_without_abstract_method" enabled="true">
        <description>Check for abstract classes without any abstract methods</description>
        <condition><![CDATA[
        !containsRegex(classBody, "abstract\s+\w+\s*\([^)]*\)\s*;")
    ]]></condition>
        <pattern>abstract\s+\w+\s*\([^)]*\)\s*;</pattern>
        <message>Abstract class should contain at least one abstract method.</message>
    </rule>

    <rule id="protected_constructor_in_abstract_class" enabled="false">
        <description>Check for protected constructors in abstract classes</description>
        <condition><![CDATA[
        !containsRegex(classBody, "protected\s+\w+\s*\([^)]*\)\s*{[^}]*}")
    ]]></condition>
        <pattern>protected\s+\w+\s*\([^)]*\)\s*{[^}]*}</pattern>
        <message>Abstract class should have a protected constructor to prevent direct instantiation.</message>
    </rule>

    <rule id="clone_array_objects" enabled="true">
        <description>Check for constructors and methods receiving arrays without cloning objects</description>
        <condition><![CDATA[
        containsRegex(methodSignature, "\b(\w+)\s*\(\s*(.*?)\[\]\s*\)")
        && containsRegex(methodBody, "(\1\s*\\[\\]\s*=\s*\\2\\s*\\.\\s*clone\\(\\))|(\1\s*\\[\\]\s*=\s*\\2\\.clone\\(\\))")]]></condition>
        <pattern></pattern> <!-- No specific pattern needed for this rule -->
        <message>Constructors and methods receiving arrays should clone objects and store the copy.</message>
    </rule>

    <rule id="avoid_message_digest_as_field" enabled="true">
        <description>Avoid declaring MessageDigest instances as fields</description>
        <condition><![CDATA[
        containsRegex(classBody, "private\s+(static\s+)?MessageDigest\s+\w+;")
    ]]></condition>
        <pattern></pattern> <!-- No specific pattern needed for this rule -->
        <message>MessageDigest instances should not be declared as fields. Create them locally instead.</message>
    </rule>

    <rule id="avoid_reassigning_exception_variable" enabled="true">
        <description>Avoid reassigning exception variables caught in catch statements</description>
        <condition><![CDATA[
        containsRegex(catchBlock, "catch\s*\\(.*?Exception\s+\\w+\\s*\\)")
        && containsRegex(catchBlock, "\\w+\\s*=\\s*\\w+\\s*;\\s*//\\s*Reassigning\\s+exception\\s+variable")
    ]]></condition>
        <pattern></pattern> <!-- No specific pattern needed for this rule -->
        <message>Reassigning exception variables caught in catch statements should be avoided.</message>
    </rule>

    <rule id="avoid_reassigning_loop_variables" enabled="true">
        <description>Avoid reassigning loop variables</description>
        <properties>
            <property name="foreachReassign" value="deny" description="Configures handling of reassignments in foreach loops: deny, allow, firstOnly"/>
            <property name="forReassign" value="deny" description="Configures handling of reassignments in for loops: deny, allow, skip"/>
        </properties>
        <condition><![CDATA[
        (
            (
                $foreachReassign == "deny" && containsRegex(foreachLoop, "\\b" + loopVariable + "\\b\\s*=\\s*[^;]+;")
            )
            ||
            (
                $foreachReassign == "firstOnly" && containsRegex(foreachLoop, "\\b" + loopVariable + "\\b\\s*=\\s*[^;]+;") && !containsRegex(foreachLoop, "\\b" + loopVariable + "\\b\\s*=\\s*[^;]+;.*?\\b" + loopVariable + "\\b")
            )
        )
        ||
        (
            (
                $forReassign == "deny" && containsRegex(forLoop, "\\b" + controlVariable + "\\b\\s*=\\s*[^;]+;")
            )
            ||
            (
                $forReassign == "skip" && containsRegex(forLoop, "\\b" + controlVariable + "\\b\\s*=\\s*[^;]+;") && !containsRegex(forLoop, "\\b" + controlVariable + "\\b\\s*(\\+\\+|--|\\+=|-=)\\s*")
            )
        )
    ]]></condition>
        <pattern></pattern> <!-- No specific pattern needed for this rule -->
        <message>Reassigning loop variables can lead to hard-to-find bugs. Prevent or limit how these variables can be changed.</message>
    </rule>

    <rule id="avoid_reassigning_parameters" enabled="true">
        <description>Avoid reassigning values to incoming parameters of methods or constructors</description>
        <condition><![CDATA[
        containsRegex(methodSignature, "\\b" + parameterName + "\\b")
        && containsRegex(methodBody, "\\b" + parameterName + "\\b\\s*=\\s*[^;]+;")
    ]]></condition>
        <pattern></pattern> <!-- No specific pattern needed for this rule -->
        <message>Reassigning values to incoming parameters of methods or constructors is not recommended. Use temporary local variables instead.</message>
    </rule>

    <rule id="avoid_stringbuffer_stringbuilder_in_long_lived_objects" enabled="true">
        <description>Avoid using StringBuffers/StringBuilders in objects with long lifetimes</description>
        <condition><![CDATA[
        containsRegex(classBody, "\\b(StringBuffer|StringBuilder)\\b.*;\\s*//\\s*Holding\\s+in\\s+long-lived\\s+objects")
    ]]></condition>
        <pattern></pattern> <!-- No specific pattern needed for this rule -->
        <message>StringBuffers/StringBuilders can grow considerably and may become a source of memory leaks if held within objects with long lifetimes.</message>
    </rule>

    <rule id="avoid_hardcoded_ip_addresses" enabled="true">
        <description>Avoid hard-coded IP addresses in the application</description>
        <condition><![CDATA[
        containsRegex(fileContent, "(?<!\\w)(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})(?!\\w)")
    ]]></condition>
        <pattern></pattern> <!-- No specific pattern needed for this rule -->
        <message>Hard-coded IP addresses can become impossible to deploy in some cases. Externalize IP addresses instead.</message>
    </rule>

    <rule id="check_resultset_navigation_return_values" enabled="true">
        <description>Always check the return values of navigation methods (next, previous, first, last) of a ResultSet</description>
        <condition><![CDATA[
        containsRegex(methodBody, "next\\(\\)\\s*==\\s*false;")
        || containsRegex(methodBody, "previous\\(\\)\\s*==\\s*false;")
        || containsRegex(methodBody, "first\\(\\)\\s*==\\s*false;")
        || containsRegex(methodBody, "last\\(\\)\\s*==\\s*false;")
    ]]></condition>
        <pattern></pattern> <!-- No specific pattern needed for this rule -->
        <message>Always check the return values of navigation methods (next, previous, first, last) of a ResultSet. If the value return is ‘false’, it should be handled properly.</message>
    </rule>

    <rule id="avoid_constants_in_interfaces" enabled="true">
        <description>Avoid using constants in interfaces</description>
        <condition><![CDATA[
        containsRegex(interfaceBody, "public\\s+static\\s+final\\s+[^\\s]+\\s+[^\\s]+\\s*=\\s*[^;]+;")
    ]]></condition>
        <pattern></pattern> <!-- No specific pattern needed for this rule -->
        <message>Using constants in interfaces is a bad practice. Consider using a utility class or an enum type instead.</message>
    </rule>

    <rule id="default_label_last_in_switch" enabled="true">
        <description>By convention, the default label should be the last label in a switch statement</description>
        <condition><![CDATA[
        containsRegex(methodBody, "default\\s*:")
        && containsRegex(methodBody, "default\\s*:")
        && indexOfRegex(methodBody, "default\\s*:") < lastIndexOfRegex(methodBody, "case\\s+")
    ]]></condition>
        <pattern></pattern> <!-- No specific pattern needed for this rule -->
        <message>The default label should be the last label in a switch statement by convention.</message>
    </rule>




</triall>
